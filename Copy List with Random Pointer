/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
    if(head==null)return null;
     Node cur=head;     //inset the copy nodes blw the original nodes
     while(cur!=null){
         Node old_cur=cur.next;
         cur.next=new Node(cur.val);
         cur.next.next=old_cur;
         cur=old_cur;
     }
      cur=head;           //set its ransom pointers(deep copy)
      while(cur!=null){
          if(cur.random==null){     cur.next.random=null;}
          else{ cur.next.random=cur.random.next ;}
          cur=cur.next.next;
      }
       cur=head;              //seperate and return the copy nodes
       Node new_cur=cur.next;
       Node ans=new_cur;
       while(cur!=null && new_cur !=null){
          cur.next=cur.next==null?null:cur.next.next;
          new_cur.next=new_cur.next==null?null : new_cur.next.next;
          cur=cur.next;
          new_cur=new_cur.next;  
          }
       return ans;     } }
//  Map<Node, Node> map = new HashMap<>();
//       map.put(null, null);
//         Node cur = head;
//         while(cur != null) {
//             map.put(cur, new Node(cur.val)) ;            //cur_node,copy
//             cur = cur.next;   }
//         cur = head;
//        while(cur != null) {
//             map.get(cur).next = map.get(cur.next);          //changing pointers for new_node
//             map.get(cur).random = map.get(cur.random);
//             cur = cur.next;
//         }    return map.get(head);
