class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
       return partionIntoLists(0,lists.length-1,lists);
    }

     ListNode partionIntoLists(int start,int end,ListNode[] lists){
        if(start>end){
            return null;
        }
        if(start==end){
            return lists[start];
        }
        int mid=start+(end-start)/2;
        ListNode l1=partionIntoLists(start,mid,lists);
        ListNode l2=partionIntoLists(mid+1,end,lists);
        //merge
        return mergeTwoSortedLists(l1,l2);
    }

    ListNode mergeTwoSortedLists(ListNode l1,ListNode l2){
        if(l1==null)return l2;
        if(l2==null)return l1;
        if(l1.val<l2.val){
            l1.next=mergeTwoSortedLists(l1.next,l2);
            return l1;
        }else{
            l2.next=mergeTwoSortedLists(l1,l2.next);
            return l2;
        }
      
    }
   
}
