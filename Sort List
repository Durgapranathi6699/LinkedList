class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null)return head;
        ListNode temp=head;
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            temp=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        temp.next=null;
        ListNode left=sortList(head);
        ListNode right=sortList(slow);

        return merge(left,right);
    
    }
    //MERGE SORT
    ListNode merge(ListNode l1,ListNode l2){
        ListNode temp=new ListNode(0);
        ListNode node=temp;
         while(l1!=null && l2!=null){
             if(l1.val<l2.val){
                node.next=l1;
                l1=l1.next;
             }else{
                 node.next=l2;
                 l2=l2.next;
             }
             node=node.next;
         }
         if(l1!=null){
             node.next=l1;
         }
         if(l2!=null){
             node.next=l2;
         }
         return temp.next;
    }
}
